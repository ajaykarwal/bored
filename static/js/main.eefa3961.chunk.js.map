{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","accessibility","activity","key","participants","price","type","handleSubmitRandom","bind","assertThisInitialized","handleSubmit","fetchData","newState","_this2","QUERY","undefined","console","table","concat","fetch","then","response","json","data","log","setState","catch","err","event","preventDefault","target","value","react_default","a","createElement","className","onClick","onSubmit","htmlFor","name","id","defaultValue","min","step","max","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eefa3961.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst API = \"https://www.boredapi.com/api/activity?\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accessibility: 0.2,\n      activity: \"\",\n      key: null,\n      participants: 1,\n      price: 0,\n      type: \"\",\n    };\n    this.handleSubmitRandom = this.handleSubmitRandom.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchData = this.fetchData.bind(this);\n  }\n\n  fetchData(newState) {\n    let QUERY = \"\";\n\n    if (newState !== undefined) {\n      console.table(newState);\n      \n      const { accessibility, participants, price, type } = newState;\n      QUERY = `accessibility=${accessibility}&participants=${participants}&price=${price}&type=${type}`;\n    }\n\n    fetch(API + QUERY)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n\n        if (data[\"error\"]) {\n          this.setState({\n            activity: data[\"error\"]\n          })\n        } else {\n\n          this.setState({\n            activity: data.activity,\n            type: data.type,\n            participants: data.participants,\n            price: data.price,\n            key: data.key,\n          });\n        }\n      })\n      .catch(function(err) {\n        console.log(\"error\", err);\n    });\n  }\n\n  handleSubmitRandom() {\n    this.fetchData();\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n\n    let newState = {\n      type: event.target[0].value,\n      participants: event.target[1].value,\n      price: event.target[2].value,\n      accessibility: event.target[3].value,\n    }\n    this.fetchData(newState);\n  }\n\n  // LIFECYCLE METHODS\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <p className=\"question\">Are you bored?</p>\n        <h1 className=\"activity\">{this.state.activity}</h1>\n        <input className=\"btn\" type=\"submit\" onClick={this.handleSubmitRandom} value=\"Refresh\" />\n\n        <hr />\n\n        <h2>Still bored? Try something more specfic</h2>\n\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"inputType\">Type of activity</label>\n            <select\n              name=\"inputType\"\n              id=\"inputType\"\n              defaultValue={this.state.type}\n            >\n              <option value=\"\">Random</option>\n              <option value=\"education\">Education</option>\n              <option value=\"recreational\">Recreational</option>\n              <option value=\"social\">Social</option>\n              <option value=\"diy\">Diy</option>\n              <option value=\"charity\">Charity</option>\n              <option value=\"cooking\">Cooking</option>\n              <option value=\"relaxation\">Relaxation</option>\n              <option value=\"music\">Music</option>\n              <option value=\"busywork\">Busywork</option>\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"inputParticipants\">Number of participants</label>\n            <input\n              type=\"number\"\n              name=\"inputParticipants\"\n              id=\"inputParticipants\"\n              min=\"1\"\n              defaultValue={this.state.participants}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"inputPrice\">Price range (0-1)</label>\n            <input\n              type=\"range\"\n              name=\"inputPrice\"\n              id=\"inputPrice\"\n              min=\"0\"\n              step=\"0.01\"\n              defaultValue={this.state.price}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"inputAccessibility\">Difficulty (0-1)</label>\n            <input\n              id=\"inputAccessibility\"\n              type=\"range\"\n              min=\"0.0\"\n              max=\"1.0\"\n              step=\"0.1\"\n              defaultValue={this.state.accessibility}\n            />\n          </div>\n\n          <input className=\"btn\" type=\"submit\" value=\"Give me something to do\" />\n        </form>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}